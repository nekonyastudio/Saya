using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Saya.Web.EntityFramework.Auditing.Entities;

namespace Saya.Web.EntityFramework.Auditing
{
    /// <summary>
    /// 自动审计功能 针对DbContext的扩展方法
    /// </summary>
    public static class AuditsDbContextExtension
    {
        public static List<AuditEntry<TUser>> OnBeforeSaveChanges<TUser>(this DbContext dbContext, DbSet<AuditRecord<TUser>> auditsSet, List<Type> IgnoreTable = null)
        {
            dbContext.ChangeTracker.DetectChanges();
            var auditEntries = new List<AuditEntry<TUser>>();
            foreach (var entry in dbContext.ChangeTracker.Entries())
            {
                if (entry.Entity is AuditRecord<TUser>
                    || entry.State == EntityState.Detached
                    || entry.State == EntityState.Unchanged)
                    continue;

                if (entry.Entity is not IAuditedEntity<TUser>) //所有不是继承自审计实体的都不管
                    continue;

                if (IgnoreTable != null && IgnoreTable.Count > 0)
                {
                    var entityType = entry.Entity.GetType();
                    if (IgnoreTable.Contains(entityType))
                        continue;
                }


                var auditEntry = new AuditEntry<TUser>(entry);
                auditEntry.TableName = entry.Metadata.GetTableName();
                auditEntries.Add(auditEntry);

                #region 操作用户
                if (entry.Entity is IAuditedEntity<TUser>)
                {
                    var auditEntity = entry.Entity as IAuditedEntity<TUser>;
                    if (entry.State == EntityState.Added)
                        auditEntry.Modifier = auditEntity.CreatorId;
                    else
                        auditEntry.Modifier = auditEntity.LastModifierId;
                    if (auditEntity.CreateTime == null)
                        auditEntity.CreateTime = DateTimeOffset.UtcNow;
                    auditEntity.LastModificationTime = DateTimeOffset.UtcNow; //始终更新
                }
                #endregion

                foreach (var property in entry.Properties)
                {
                    if (property.IsTemporary)
                    {
                        // value will be generated by the database, get the value after saving
                        auditEntry.TemporaryProperties.Add(property);
                        continue;
                    }

                    string propertyName = property.Metadata.Name;
                    if (property.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[propertyName] = property.CurrentValue;
                        continue;
                    }

                    if (property.Metadata.Name == "CreateTime")
                        continue;
                    if (property.Metadata.Name == "LastModificationTime")
                        continue;
                    if (property.Metadata.Name == "CreatorId")
                        continue;
                    if (property.Metadata.Name == "LastModifierId")
                        continue;


                    switch (entry.State)
                    {
                        case EntityState.Added:
                            auditEntry.NewValues[propertyName] = property.CurrentValue;
                            auditEntry.OperationType = DataOperationType.Add;
                            break;

                        case EntityState.Deleted:
                            auditEntry.OriginalValues[propertyName] = property.OriginalValue;
                            auditEntry.OperationType = DataOperationType.Delete;
                            break;

                        case EntityState.Modified:
                            if (property.IsModified)
                            {
                                auditEntry.OriginalValues[propertyName] = property.OriginalValue;
                                auditEntry.NewValues[propertyName] = property.CurrentValue;
                                auditEntry.OperationType = DataOperationType.Update;
                            }
                            break;
                    }

                }





            }

            foreach (var auditEntry in auditEntries.Where(_ => !_.HasTemporaryProperties))
            {
                auditsSet.Add(auditEntry.ToAudit());
            }

            return auditEntries.Where(_ => _.HasTemporaryProperties).ToList();
        }

        public static List<AuditEntry> OnBeforeSaveChanges(this DbContext dbContext, DbSet<AuditRecord> auditsSet, List<Type> IgnoreTable = null)
        {
            dbContext.ChangeTracker.DetectChanges();
            var auditEntries = new List<AuditEntry>();
            foreach (var entry in dbContext.ChangeTracker.Entries())
            {
                if (entry.Entity is AuditRecord
                    || entry.State == EntityState.Detached
                    || entry.State == EntityState.Unchanged)
                    continue;

                if (entry.Entity is not IAuditedEntity) //所有不是继承自审计实体的都不管
                    continue;

                if (IgnoreTable != null && IgnoreTable.Count > 0)
                {
                    var entityType = entry.Entity.GetType();
                    if (IgnoreTable.Contains(entityType))
                        continue;
                }


                var auditEntry = new AuditEntry(entry);
                auditEntry.TableName = entry.Metadata.GetTableName();
                auditEntries.Add(auditEntry);

                #region 操作用户
                if (entry.Entity is IAuditedEntity)
                {
                    var auditEntity = entry.Entity as IAuditedEntity;
                    if (entry.State == EntityState.Added)
                        auditEntry.Modifier = auditEntity.CreatorId;
                    else
                        auditEntry.Modifier = auditEntity.LastModifierId;
                    if (auditEntity.CreateTime == null)
                        auditEntity.CreateTime = DateTimeOffset.UtcNow;
                    auditEntity.LastModificationTime = DateTimeOffset.UtcNow; //始终更新
                }
                #endregion

                foreach (var property in entry.Properties)
                {
                    if (property.IsTemporary)
                    {
                        // value will be generated by the database, get the value after saving
                        auditEntry.TemporaryProperties.Add(property);
                        continue;
                    }

                    string propertyName = property.Metadata.Name;
                    if (property.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[propertyName] = property.CurrentValue;
                        continue;
                    }

                    if (property.Metadata.Name == "CreateTime")
                        continue;
                    if (property.Metadata.Name == "LastModificationTime")
                        continue;
                    if (property.Metadata.Name == "CreatorId")
                        continue;
                    if (property.Metadata.Name == "LastModifierId")
                        continue;


                    switch (entry.State)
                    {
                        case EntityState.Added:
                            auditEntry.NewValues[propertyName] = property.CurrentValue;
                            auditEntry.OperationType = DataOperationType.Add;
                            break;

                        case EntityState.Deleted:
                            auditEntry.OriginalValues[propertyName] = property.OriginalValue;
                            auditEntry.OperationType = DataOperationType.Delete;
                            break;

                        case EntityState.Modified:
                            if (property.IsModified)
                            {
                                auditEntry.OriginalValues[propertyName] = property.OriginalValue;
                                auditEntry.NewValues[propertyName] = property.CurrentValue;
                                auditEntry.OperationType = DataOperationType.Update;
                            }
                            break;
                    }

                }





            }

            foreach (var auditEntry in auditEntries.Where(_ => !_.HasTemporaryProperties))
            {
                auditsSet.Add(auditEntry.ToAudit());
            }

            return auditEntries.Where(_ => _.HasTemporaryProperties).ToList();
        }


        public static Task OnAfterSaveChanges(this DbContext dbContext, DbSet<AuditRecord> auditsSet, List<AuditEntry> auditEntries)
        {
            if (auditEntries == null || auditEntries.Count == 0)
                return Task.CompletedTask;

            foreach (var auditEntry in auditEntries)
            {
                foreach (var prop in auditEntry.TemporaryProperties)
                {
                    if (prop.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                    else
                    {
                        auditEntry.NewValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                }

                auditsSet.Add(auditEntry.ToAudit());
            }

            return dbContext.SaveChangesAsync();
        }

        public static Task OnAfterSaveChanges<TUser>(this DbContext dbContext, DbSet<AuditRecord<TUser>> auditsSet, List<AuditEntry<TUser>> auditEntries)
        {
            if (auditEntries == null || auditEntries.Count == 0)
                return Task.CompletedTask;

            foreach (var auditEntry in auditEntries)
            {
                foreach (var prop in auditEntry.TemporaryProperties)
                {
                    if (prop.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                    else
                    {
                        auditEntry.NewValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                }

                auditsSet.Add(auditEntry.ToAudit());
            }

            return dbContext.SaveChangesAsync();
        }

    }
}
